/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
        Map<Integer, TreeNode> map = new HashMap<>();
        Set<Integer> childSet = new HashSet<>();
        for (int[] desc: descriptions) {
            int parent = desc[0];
            TreeNode p = map.get(parent);
            if (p == null) {
                p = new TreeNode(parent);
                map.put(parent, p);
            }
            
            int child = desc[1];
            TreeNode c = map.get(child);
            if (c == null) {
                c = new TreeNode(child);
                map.put(child, c);
            }
            
            if (desc[2] == 1) {
                p.left = c;
            } else {
                p.right = c;
            }
            
            childSet.add(child);
        }
        
        for (int[] desc: descriptions) {
            if (!childSet.contains(desc[0])) {
                return map.get(desc[0]);
            }
        }
        return null;
    }
}
