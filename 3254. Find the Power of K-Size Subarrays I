import java.util.*;
import java.io.*;
class Solution {
    public int[] resultsArray(int[] arr, int k) {
        int n = arr.length;
        int[] ans = new int[n - k + 1];
        int[] aux = new int[n];
        NavigableMap<Integer, Integer> map = new TreeMap<>((a, b) -> {
            return b - a;
        });
        for(int i = 0; i < k; i++) map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        int[] maxiArr = new int[n - k + 1];
        maxiArr[0] = map.firstKey();
        for(int i = 1; i < n - k + 1; i++){
            map.put(arr[i - 1], map.get(arr[i - 1]) - 1);
            if(map.get(arr[i - 1]) == 0) map.remove(arr[i - 1]);
            map.put(arr[i + k - 1], map.getOrDefault(arr[i + k - 1], 0) + 1);
            maxiArr[i] = map.firstKey();
        }
        int ptr = 0;
        while(ptr < n - 1){
            int ptr1 = ptr;
            while(ptr1 < n - 1 && arr[ptr1 + 1] == arr[ptr1] + 1) ptr1++;
            for(int i = ptr; i <= ptr1; i++) aux[i] = ptr1;
            ptr = ptr1 + 1;
        }
        aux[n - 1] = n - 1;
        for(int i = 0; i <= n - k; i++){
            if(aux[i] - i + 1 >= k) ans[i] = maxiArr[i];
            else ans[i] = -1;
        }
        return ans;
    }
}
